	

#spring.cloud.config.label 指明远程仓库的分支
#spring.cloud.config.profile
#dev开发环境配置文件
#test测试环境
#pro正式环境
#spring.cloud.config.uri= http://localhost:8888/ 指明配置服务中心的网址。

#Bootstrap.yml（bootstrap.properties）在application.yml（application.properties）之前加载，
#就像application.yml一样，但是用于应用程序上下文的引导阶段。它通常用于“使用Spring Cloud Config Server时，
#应在bootstrap.yml中指定spring.application.name和spring.cloud.config.server.git.uri”
#以及一些加密/解密信息。技术上，bootstrap.yml由父Spring ApplicationContext加载。
#父ApplicationContext被加载到使用application.yml的之前。
#
#例如，当使用Spring Cloud时，通常从服务器加载“real”配置数据。为了获取URL
#（和其他连接配置，如密码等），您需要一个较早的或“bootstrap”配置。因此，您将配置服务器属性放在bootstrap.yml中，
#因为bootstrap.properties的加载是先于application.properties的。
#所以相同的属性，application.properties后加载，会覆盖之前bootstrap.properties里的值；

#bootstrap.yml  和application.yml  都可以用来配置参数
#bootstrap.yml可以理解成系统级别的一些参数配置，这些参数一般是不会变动的
#application.yml 可以用来定义应用级别的，如果搭配spring-cloud-config使用 application.yml里面定义的文件可以实现动态替换


spring.application.name=config-client
spring.cloud.config.lable=master
spring.cloud.config.profile=dev
#spring.cloud.config.uri=http://localhost:8888


eureka.client.service-url.defaultZone=http://localhost:8889/eureka
#spring.cloud.config.discovery.enabled 是否从配置中心读取文件。
#spring.cloud.config.discovery.serviceId 配置中心的servieId，即服务名
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-server
server.port=8881
qaz=12121wefw













